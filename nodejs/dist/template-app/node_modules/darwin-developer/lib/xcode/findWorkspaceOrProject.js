'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _this = this;

var _fsJetpack = require('fs-jetpack');

exports['default'] = function callee$0$0(buildPath) {
    var xfiles, xcworkspaces, xcodeprojs;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap((0, _fsJetpack.findAsync)(buildPath, {
                    matching: ['*.xcworkspace', '*.xcodeproj', '!*/*']
                }));

            case 2:
                xfiles = context$1$0.sent;

                if (xfiles.length) {
                    context$1$0.next = 5;
                    break;
                }

                throw new Error('Unable to detect either a .xcworkspace or .xcodeproj');

            case 5:
                xcworkspaces = xfiles.filter(function (file) {
                    return file.endsWith('.xcworkspace');
                });
                xcodeprojs = xfiles.filter(function (file) {
                    return file.endsWith('.xcodeproj');
                });

                if (!(xcworkspaces.length > 1)) {
                    context$1$0.next = 11;
                    break;
                }

                throw new Error('Multiple .xcworkspace files found');

            case 11:
                if (!(xcworkspaces.length === 1)) {
                    context$1$0.next = 13;
                    break;
                }

                return context$1$0.abrupt('return', xcworkspaces.pop());

            case 13:
                if (!(xcodeprojs.length > 1)) {
                    context$1$0.next = 15;
                    break;
                }

                throw new Error('Multiple .xcodeproj files found');

            case 15:
                return context$1$0.abrupt('return', xcodeprojs.pop());

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, _this);
};

module.exports = exports['default'];