'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _this = this;

var _teen_process = require('teen_process');

exports['default'] = function callee$0$0(cmd) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
    var proc, joinPromise, oldCwd;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                proc = new _teen_process.SubProcess(cmd, args);
                joinPromise = new _Promise(function (resolve, reject) {
                    proc.on('exit', function (code) {
                        if (code) {
                            reject(new Error(cmd + ' exited with code ' + code));
                        } else {
                            resolve(code);
                        }
                    });
                });

                // Redirect stdout and stderr if requested
                if (opts.stdout) {
                    opts.stdout('SubProcess: ' + cmd + ' ' + args.join(' '));
                    proc.on('lines-stdout', function (lines) {
                        return lines.map(opts.stdout);
                    });
                }
                if (opts.stderr) {
                    proc.on('lines-stderr', function (lines) {
                        return lines.map(opts.stderr);
                    });
                }

                // Change process cwd if required
                oldCwd = undefined;

                if (opts.cwd) {
                    oldCwd = process.cwd();
                    process.chdir(opts.cwd);
                }

                // Run everything
                context$1$0.prev = 6;
                context$1$0.next = 9;
                return _regeneratorRuntime.awrap(proc.start(0));

            case 9:
                context$1$0.next = 11;
                return _regeneratorRuntime.awrap(joinPromise);

            case 11:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 12:
                context$1$0.prev = 12;

                if (oldCwd) {
                    process.chdir(oldCwd);
                }
                return context$1$0.finish(12);

            case 15:
            case 'end':
                return context$1$0.stop();
        }
    }, null, _this, [[6,, 12, 15]]);
};

module.exports = exports['default'];

// Create a new promise that will resolve when proc exits