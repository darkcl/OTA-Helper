'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _this = this;

var _path = require('path');

var _fsJetpack = require('fs-jetpack');

var _cocoapodsInstallIfPossible = require('../cocoapods/installIfPossible');

var _cocoapodsInstallIfPossible2 = _interopRequireDefault(_cocoapodsInstallIfPossible);

var _xcodeFindAppFolder = require('../xcode/findAppFolder');

var _xcodeFindAppFolder2 = _interopRequireDefault(_xcodeFindAppFolder);

var _xcodeFindWorkspaceOrProject = require('../xcode/findWorkspaceOrProject');

var _xcodeFindWorkspaceOrProject2 = _interopRequireDefault(_xcodeFindWorkspaceOrProject);

var _listSchemes = require('./listSchemes');

var _listSchemes2 = _interopRequireDefault(_listSchemes);

var _run = require('./run');

var _run2 = _interopRequireDefault(_run);

function ensureWorkspaceOrProject(buildPath, opts) {
    var xfile;
    return _regeneratorRuntime.async(function ensureWorkspaceOrProject$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(opts.workspace && opts.project)) {
                    context$1$0.next = 2;
                    break;
                }

                throw new Error('Only specify a workspace OR a project file');

            case 2:
                if (!(opts.workspace || opts.project)) {
                    context$1$0.next = 4;
                    break;
                }

                return context$1$0.abrupt('return');

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap((0, _xcodeFindWorkspaceOrProject2['default'])(buildPath));

            case 6:
                xfile = context$1$0.sent;

                if (xfile.endsWith('.xcodeproj')) {
                    opts.project = xfile;
                } else {
                    opts.workspace = xfile;
                }

            case 8:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function ensureScheme(buildPath, opts) {
    var schemes;
    return _regeneratorRuntime.async(function ensureScheme$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!opts.scheme) {
                    context$1$0.next = 2;
                    break;
                }

                return context$1$0.abrupt('return');

            case 2:
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap((0, _listSchemes2['default'])(buildPath, opts));

            case 4:
                schemes = context$1$0.sent;

                if (schemes.length) {
                    context$1$0.next = 7;
                    break;
                }

                throw new Error('No scheme found');

            case 7:
                if (!(schemes.length > 1)) {
                    context$1$0.next = 9;
                    break;
                }

                throw new Error('Multiple schemes found');

            case 9:

                opts.scheme = schemes.pop();

            case 10:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function ensureConfiguration(opts) {
    if (!opts.configuration) {
        return;
    }

    opts.configuration = opts.configuration.slice(0, 1).toUpperCase() + opts.configuration.slice(1).toLowerCase();
}

exports['default'] = function callee$0$0(buildPath) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var buildProductsPath;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                // If the user has no preference, we build where the code lives
                if (!opts.derivedDataPath) {
                    opts.derivedDataPath = buildPath;
                }

                // Remove any previous build products
                buildProductsPath = (0, _path.join)(opts.derivedDataPath, 'Build', 'Products');
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap((0, _fsJetpack.removeAsync)(buildProductsPath));

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap((0, _cocoapodsInstallIfPossible2['default'])(buildPath, opts));

            case 6:
                context$1$0.next = 8;
                return _regeneratorRuntime.awrap(ensureWorkspaceOrProject(buildPath, opts));

            case 8:
                context$1$0.next = 10;
                return _regeneratorRuntime.awrap(ensureScheme(buildPath, opts));

            case 10:
                ensureConfiguration(opts);

                // Build and return the full path to the created .app
                context$1$0.next = 13;
                return _regeneratorRuntime.awrap((0, _run2['default'])(buildPath, opts));

            case 13:
                context$1$0.next = 15;
                return _regeneratorRuntime.awrap((0, _xcodeFindAppFolder2['default'])(buildProductsPath));

            case 15:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, _this);
};

module.exports = exports['default'];

// Run cocoapods first, as they might create a new .xcworkspace!

// Fill and ensure proper opts