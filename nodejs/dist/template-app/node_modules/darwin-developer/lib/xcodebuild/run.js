'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$entries = require('babel-runtime/core-js/object/entries')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _this = this;

var _lodashIsarray = require('lodash.isarray');

var _lodashIsarray2 = _interopRequireDefault(_lodashIsarray);

var _hasAgreedEula = require('./hasAgreedEula');

var _hasAgreedEula2 = _interopRequireDefault(_hasAgreedEula);

var _myExec = require('../myExec');

var _myExec2 = _interopRequireDefault(_myExec);

exports['default'] = function callee$0$0(buildPath) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var commands = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    var args, _iterator, _isArray, _i, _ref, key, value;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap((0, _hasAgreedEula2['default'])(opts));

            case 2:
                if (context$1$0.sent) {
                    context$1$0.next = 4;
                    break;
                }

                throw new Error('XCode EULA has not been agreed yet');

            case 4:

                if (!(0, _lodashIsarray2['default'])(commands)) {
                    commands = [commands]; // eslint-disable-line
                }

                args = [];
                _iterator = _Object$entries(opts), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);

            case 7:
                if (!_isArray) {
                    context$1$0.next = 13;
                    break;
                }

                if (!(_i >= _iterator.length)) {
                    context$1$0.next = 10;
                    break;
                }

                return context$1$0.abrupt('break', 24);

            case 10:
                _ref = _iterator[_i++];
                context$1$0.next = 17;
                break;

            case 13:
                _i = _iterator.next();

                if (!_i.done) {
                    context$1$0.next = 16;
                    break;
                }

                return context$1$0.abrupt('break', 24);

            case 16:
                _ref = _i.value;

            case 17:
                key = _ref[0];
                value = _ref[1];

                if (!(key === 'stdout' || key === 'stderr')) {
                    context$1$0.next = 21;
                    break;
                }

                return context$1$0.abrupt('continue', 22);

            case 21:

                args.push('-' + key, value);

            case 22:
                context$1$0.next = 7;
                break;

            case 24:
                context$1$0.next = 26;
                return _regeneratorRuntime.awrap((0, _myExec2['default'])('xcodebuild', [].concat(args, commands), opts));

            case 26:
            case 'end':
                return context$1$0.stop();
        }
    }, null, _this);
};

module.exports = exports['default'];