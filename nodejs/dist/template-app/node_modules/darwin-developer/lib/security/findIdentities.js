'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _teen_process = require('teen_process');

var TYPE = {
    BASIC: 'basic',
    SSL_CLIENT: 'ssl-client',
    SSL_SERVER: 'ssl-server',
    SMIME: 'smime',
    EAP: 'eap',
    IPSEC: 'ipsec',
    ICHAT: 'ichat',
    CODESIGNING: 'codesigning',
    SYS_DEFAULT: 'sys-default',
    SYS_KERBEROS_KDC: 'sys-kerberos-kdc',
    MACAPPSTORE: 'macappstore',
    APPLEID: 'appleID'
};

exports.TYPE = TYPE;

exports['default'] = function callee$0$0(_ref) {
    var _ref$type = _ref.type;
    var type = _ref$type === undefined ? null : _ref$type;
    var _ref$keychains = _ref.keychains;
    var keychains = _ref$keychains === undefined ? [] : _ref$keychains;

    var typeArgs, _ref2, stdout;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                typeArgs = type ? ['-p', type] : [];
                context$1$0.next = 3;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['find-identity', '-v'].concat(typeArgs, keychains)));

            case 3:
                _ref2 = context$1$0.sent;
                stdout = _ref2.stdout;
                return context$1$0.abrupt('return', stdout
                // Split into single lines
                .split('\n')
                // Extract identities
                .map(function (line) {
                    var match = line.match(/\) (.+) "(.+)"/);
                    if (!match || !match[1] || !match[2]) {
                        return null;
                    }

                    return { id: match[1], name: match[2] };
                })
                // Filter null rows from above
                .filter(function (row) {
                    return !!row;
                }));

            case 6:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};