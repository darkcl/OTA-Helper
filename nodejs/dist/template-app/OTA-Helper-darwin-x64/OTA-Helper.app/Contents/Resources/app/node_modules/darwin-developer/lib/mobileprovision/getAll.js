'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _fsJetpack = require('fs-jetpack');

var _plist = require('plist');

function isValid(obj, filters) {
    if (!filters) {
        return true;
    }

    // expired
    var isExpired = obj.ExpirationDate.getTime() <= Date.now();
    if (filters.expired && !isExpired) {
        return false;
    } else if (!filters.expired && isExpired) {
        return false;
    }

    // group
    if (filters.group && filters.group.toLowerCase() !== obj.group) {
        return false;
    }

    // sku
    var objSku = obj.Entitlements['application-identifier'];
    if (filters.sku && !objSku.endsWith('.' + filters.sku) && !obj.isWildcard) {
        return false;
    }

    // platform
    var objPlatforms = obj.Platform.map(function (value) {
        return value.toLowerCase();
    });
    if (filters.platform && objPlatforms.indexOf(filters.platform.toLowerCase()) === -1) {
        return false;
    }

    // device
    var objDevices = obj.ProvisionedDevices.map(function (value) {
        return value.toLowerCase();
    });
    if (filters.device && objDevices.indexOf(filters.device.toLowerCase()) === -1) {
        return false;
    }

    // developer
    var objDevelopers = obj.DeveloperCertificatesNames.map(function (value) {
        return value.toLowerCase();
    }).join('||');
    if (filters.developer && objDevelopers.indexOf(filters.developer.toLowerCase()) === -1) {
        return false;
    }

    return true;
}

function processFiles(files, filters) {
    return files
    // Load the file from the FS
    .map(function (file) {
        return [file, (0, _fsJetpack.read)(file, 'buf')];
    })
    // Slice right part out of the mobileprovision file
    .map(function (_ref) {
        var file = _ref[0];
        var buf = _ref[1];
        return [file, buf.slice(buf.indexOf('<plist'))];
    }).map(function (_ref2) {
        var file = _ref2[0];
        var buf = _ref2[1];
        return [file, buf.slice(0, buf.indexOf('</plist>') + 8)];
    })
    // Convert it to a JS object
    .map(function (_ref3) {
        var file = _ref3[0];
        var buf = _ref3[1];
        return [file, buf.toString()];
    }).map(function (_ref4) {
        var file = _ref4[0];
        var buf = _ref4[1];
        return [file, (0, _plist.parse)(buf)];
    })
    // Store the filename
    .map(function (_ref5) {
        var file = _ref5[0];
        var obj = _ref5[1];

        obj.file = file;
        return obj;
    })
    // Extract developer cert names
    .map(function (obj) {
        obj.DeveloperCertificatesNames = obj.DeveloperCertificates.map(function (cert) {
            var matches = new Buffer(cert, 'base64').toString().match(/(iPhone .+: .+ \(.+\))/);
            return matches && matches[0];
        });
        return obj;
    })
    // Ensure ProvisionedDevices exists
    .map(function (obj) {
        obj.ProvisionedDevices = obj.ProvisionedDevices || [];
        return obj;
    })
    // Detect group
    .map(function (obj) {
        if (obj.ProvisionedDevices && obj.ProvisionedDevices.length) {
            obj.group = 'development';
        } else {
            obj.group = 'distribution';
        }
        return obj;
    })
    // Detect if it's a wildcard
    .map(function (obj) {
        obj.isWildcard = obj.Entitlements && obj.Entitlements['application-identifier'] && obj.Entitlements['application-identifier'].endsWith('.*');
        return obj;
    })
    // Remove unwanted entries
    .filter(function (obj) {
        return isValid(obj, filters);
    });
}

exports['default'] = function () {
    var filters = arguments.length <= 0 || arguments[0] === undefined ? { expired: false } : arguments[0];

    var homeDir = (0, _fsJetpack.cwd)(process.env.HOME);

    return homeDir.cwd('Library', 'MobileDevice', 'Provisioning Profiles').findAsync('.', { matching: '*.mobileprovision' }).then(function (files) {
        return processFiles(files, filters);
    });
};

module.exports = exports['default'];